#include <iostream>
#include <vector>
#include <iomanip>
#include <limits>

using namespace std;

void printMatrix(const vector<vector<double>>& matrix) {
    int rows = matrix.size();
    int cols = matrix[0].size();

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << setw(8) << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

vector<vector<double>> inverseMatrix(vector<vector<double>>& matrix) {
    int n = matrix.size();

    vector<vector<double>> extendedMatrix(n, vector<double>(2 * n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            extendedMatrix[i][j] = matrix[i][j];
        }
        extendedMatrix[i][i + n] = 1;
    }

    for (int i = 0; i < n; i++) {
        int pivotRow = i;
        while (pivotRow < n && abs(extendedMatrix[pivotRow][i]) < 1e-6) {
            pivotRow++;
        }

        if (pivotRow == n) {
            continue;
        }

        if (pivotRow != i) {
            swap(extendedMatrix[i], extendedMatrix[pivotRow]);
        }

        double pivot = extendedMatrix[i][i];
        for (int j = i; j < 2 * n; j++) {
            extendedMatrix[i][j] /= pivot;
        }

        for (int k = i + 1; k < n; k++) {
            double factor = extendedMatrix[k][i];
            for (int j = i; j < 2 * n; j++) {
                extendedMatrix[k][j] -= factor * extendedMatrix[i][j];
            }
        }
    }

    for (int i = 0; i < n; i++) {
        bool allZero = true;
        for (int j = 0; j < n; j++) {
            if (abs(extendedMatrix[i][j]) > 1e-6) {
                allZero = false;
                break;
            }
        }
        if (allZero) {
            cout << "Матрица вырождена! Обратная матрица не существует." << endl;
            return {};
        }
    }

    for (int i = n - 1; i >= 0; i--) {
        // Обнуление элементов над ведущим элементом
        for (int k = i - 1; k >= 0; k--) {
            double factor = extendedMatrix[k][i];
            for (int j = i; j < 2 * n; j++) {
                extendedMatrix[k][j] -= factor * extendedMatrix[i][j];
            }
        }
    }

    vector<vector<double>> inverse(n, vector<double>(n));
    for (int i = 0; i < n; i++) {
        for (int j = n; j < 2 * n; j++) {
            inverse[i][j - n] = extendedMatrix[i][j];
        }
    }

    return inverse;
}

int main() {
    setlocale(0, "ru");
    int choice;
    int n;
    vector<vector<double>> matrix;

    do {
        cout << "\nМеню:" << endl;
        cout << "1. Ввести новую матрицу" << endl;
        cout << "2. Найти обратную матрицу" << endl;
        cout << "3. Выход" << endl;
        cout << "Введите ваш выбор: ";
        cin >> choice;
        vector<vector<double>> inverse = inverseMatrix(matrix);
        switch (choice) {
        case 1:
            cout << "Введите размерность матрицы: ";
            cin >> n;

            if (n <= 0) {
                cout << "Некорректная размерность матрицы! Введите положительное число." << endl;
                break;
            }

            matrix.resize(n, vector<double>(n));
            cout << "Введите элементы матрицы:" << endl;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (!(cin >> matrix[i][j])) {
                        cout << "Ошибка ввода данных! Введите числовые значения." << endl;
                        cin.clear();
                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                        break;
                    }
                }
            }
            cout << "Исходная матрица:" << endl;
            printMatrix(matrix);
            break;

        case 2:
            if (matrix.empty()) {
                cout << "Сначала введите матрицу." << endl;
                break;
            }
            if (inverse.empty()) {
                cout << "Обратная матрица не существует!" << endl;
            }
            else {
                cout << "Обратная матрица:" << endl;
                printMatrix(inverse);
            }
            break;

        case 3:
            cout << "Выход из программы." << endl;
            break;

        default:
            cout << "Неверный выбор!" << endl;
        }
    } while (choice != 3);

    return 0;
}
